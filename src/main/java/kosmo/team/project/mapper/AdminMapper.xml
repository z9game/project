<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kosmo.team.project.dao.AdminDAO">





   <sql id="boardWhere">

      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         and (
      </if>


      <if test="keyword1!=null and keyword1.length()>0">
         <if test="searchType1 == 'all' ">
            (
            upper(m.mid) like upper('%${keyword1}%')
            or
            upper(m.name)
            like upper('%${keyword1}%')
            or
            upper(m.nickname) like
            upper('%${keyword1}%')
            or
            upper(m.email) like upper('%${keyword1}%')
            or
            upper(m.phone) like
            upper('%${keyword1}%')
            )
         </if>
         <if test="searchType1 == 'mid'">
            upper(m.mid) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'name'">
            upper(m.name) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'nickname'">
            upper(m.nickname) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'phone'">
            upper(m.phone) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'email'">
            upper(m.email) like upper('%${keyword1}%')
         </if>

      </if>

      <if
         test="(keyword1!=null and keyword1.length()>0) and (keyword2!=null and keyword2.length()>0)">
         ${orand}
      </if>

      <if test="keyword2!=null and keyword2.length()>0">
         <if test="searchType1 == 'all' ">
            (
            upper(m.mid) like upper('%${keyword2}%')
            or
            upper(m.name)
            like
            upper('%${keyword2}%')
            or
            upper(m.nickname) like
            upper('%${keyword2}%')
            or
            upper(m.email) like upper('%${keyword2}%')
            or
            upper(m.phone) like
            upper('%${keyword2}%')
            )
         </if>
         <if test="searchType1 == 'mid'">
            upper(m.mid) like upper('%${keyword2}%')
         </if>
         <if test="searchType1 == 'name'">
            upper(m.name) like upper('%${keyword2}%')
         </if>
         <if test="searchType1 == 'nickname'">
            upper(m.nickname) like upper('%${keyword2}%')
         </if>
         <if test="searchType1 == 'phone'">
            upper(m.phone) like upper('%${keyword2}%')
         </if>
         <if test="searchType1 == 'email'">
            upper(m.email) like upper('%${keyword2}%')
         </if>

      </if>

      <if test="gender!=null and gender.size()>0">
         <foreach collection="gender" item="tmp" open=" and (  "
            close="  ) " separator=" or ">

            gender = '${tmp}'

         </foreach>
      </if>


      <if test="ageRange != null and ageRange != '' ">
         <foreach collection="ageRange" item="tmp2" open=" and ( "
            close=" ) " separator=" or ">
            <if test="tmp2 == '10대'  ">
               to_number(to_char(sysdate, 'YYYY')) - to_number(to_char(birthdate, 'YYYY')) between 10 and 19
            </if>
            <if test="tmp2 == '20대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 20 and 29
            </if>
            <if test="tmp2 == '30대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 30 and 39
            </if>
            <if test="tmp2 == '40대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 40 and 49
            </if>
            <if test="tmp2 == '50대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 50 and 59
            </if>
            <if test="tmp2 == '60대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 60 and 69
            </if>
            <if test="tmp2 == '70대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 70 and 79
            </if>
            <if test="tmp2 == '80대'  ">
               to_number(to_char(sysdate, 'YYYY')) -
               to_number(to_char(birthdate, 'YYYY')) between 80 and 89
            </if>
         </foreach>
      </if>


      <if test="sido !=null and sido>0 ">
         and
         (
         s.sido_id = ${sido}
         )

         <if test="sigungu !=null and sigungu>0 ">
            and
            (
            si.sigungu_id = ${sigungu}
            )

         </if>


      </if>



      <if test="(minDate != null and minDate.length() > 0)">
         and to_char(reg_date, 'YYYY-MM-DD') &gt;= #{minDate}
         <if test="(maxDate != null and maxDate.length() > 0)">
            and to_char(reg_date, 'YYYY-MM-DD') &lt;= #{maxDate}
         </if>
      </if>
      <if test="(maxDate != null and maxDate.length() > 0)">
         and to_char(reg_date, 'YYYY-MM-DD') &lt;= #{maxDate}
         <if test="(minDate != null and minDate.length() > 0)">
            and to_char(reg_date, 'YYYY-MM-DD') &gt;= #{minDate}
         </if>

      </if>


      <if test="(minGames_played != null and minGames_played > 0)">
         and games_played &gt;= to_number(#{minGames_played})
         <if test="(maxGames_played != null and maxGames_played > 0)">
            and games_played &lt;= to_number(#{maxGames_played})
         </if>
      </if>

      <if test="(maxGames_played != null and maxGames_played > 0)">
         and games_played &lt; = to_number(#{maxGames_played})
         <if test="(minGames_played != null and minGames_played > 0)">
            and games_played &gt; = to_number(#{minGames_played})
         </if>
      </if>




      <if test="( minWin != null and minWin > 0)">
         and wins &gt;= to_number(#{minWin})
         <if test="( maxWin != null and maxWin > 0)">
            and wins &lt;= to_number(#{maxWin})
         </if>
      </if>

      <if test="( maxWin != null and maxWin > 0)">
         and wins &lt; = to_number(#{maxWin})
         <if test="( minWin != null and minWin > 0)">
            and wins &gt; = to_number(#{minWin})
         </if>
      </if>




      <if test="( minDraws != null and minDraws > 0)">
         and wins &gt;= to_number(#{minDraws})
         <if test="( maxDraws != null and maxDraws > 0)">
            and wins &lt;= to_number(#{maxDraws})
         </if>
      </if>

      <if test="( maxDraws != null and maxDraws > 0)">
         and draws &lt; = to_number(#{maxDraws})
         <if test="( minDraws != null and minDraws > 0)">
            and draws &gt; = to_number(#{minDraws})
         </if>
      </if>


      <if test="( minLoss != null and minLoss > 0)">
         and wins &gt;= to_number(#{minLoss})
         <if test="( maxLoss != null and maxLoss > 0)">
            and wins &lt;= to_number(#{maxLoss})
         </if>
      </if>

      <if test="( maxLoss != null and maxLoss > 0)">
         and losses &lt; = to_number(#{maxLoss})
         <if test="( minLoss != null and minLoss > 0)">
            and losses &gt; = to_number(#{minLoss})
         </if>
      </if>



      <if test="( minGoals != null and minGoals > 0)">
         and goals_for &gt;= to_number(#{minGoals})
         <if test="( maxGoals != null and maxGoals > 0)">
            and goals_for &lt;= to_number(#{maxGoals})
         </if>
      </if>

      <if test="( maxGoals != null and maxGoals > 0)">
         and goals_for &lt; = to_number(#{maxGoals})
         <if test="( minGoals != null and minGoals > 0)">
            and goals_for &gt; = to_number(#{minGoals})
         </if>
      </if>


      <if test="( minAssists != null and minAssists > 0)">
         and goals_assist &gt;= to_number(#{minAssists})
         <if test="( maxAssists != null and maxAssists > 0)">
            and goals_assist &lt;= to_number(#{maxAssists})
         </if>
      </if>

      <if test="( maxAssists != null and maxAssists > 0)">
         and goals_assist &lt; = to_number(#{maxAssists})
         <if test="( minAssists != null and minAssists > 0)">
            and goals_assist &gt; = to_number(#{minAssists})
         </if>
      </if>



      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         )
      </if>

   </sql>



   <!-- 공지사항 where -->



   <sql id="noticeWhere">
      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         and (
      </if>

      <if test="keyword1!=null and keyword1.length()>0">
         <if test="searchType1 == 'all' ">
            (
            upper(content) like upper('%${keyword1}%')
            or
            upper(subject) like upper('%${keyword1}%')
            )
         </if>
         <if test="searchType1 == 'content'">
            upper(content) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'subject'">
            upper(subject) like upper('%${keyword1}%')
         </if>


      </if>

      <if
         test="(keyword1!=null and keyword1.length()>0) and (keyword2!=null and keyword2.length()>0)">
         ${orand}
      </if>

      <if test="keyword2!=null and keyword2.length()>0">
         <if test="searchType1 == 'all' ">
            (
            upper(content) like upper('%${keyword2}%')
            or
            upper(subject) like upper('%${keyword2}%')

            )
         </if>
         <if test="searchType1 == 'content'">
            upper(content) like upper('%${keyword2}%')
         </if>
         <if test="searchType1 == 'subject'">
            upper(subject) like upper('%${keyword2}%')
         </if>

      </if>

      <if test="(minDate != null and minDate.length() > 0)">
         and to_char(reg_date, 'YYYY-MM-DD') &gt;= #{minDate}
         <if test="(maxDate != null and maxDate.length() > 0)">
            and to_char(reg_date, 'YYYY-MM-DD') &lt;= #{maxDate}
         </if>
      </if>
      <if test="(maxDate != null and maxDate.length() > 0)">
         and to_char(reg_date, 'YYYY-MM-DD') &lt;= #{maxDate}
         <if test="(minDate != null and minDate.length() > 0)">
            and to_char(reg_date, 'YYYY-MM-DD') &gt;= #{minDate}
         </if>

      </if>






      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         )
      </if>


   </sql>


   <!-- -->


   <!-- 경기장where -->




   <sql id="stadiumWhere">

      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         and (
      </if>


      <if test="keyword1!=null and keyword1.length()>0">

         <if test="searchTypeStadium == 'all' ">
            (
            upper(st.stadium_name) like upper('%${keyword1}%')
            or
            upper(st.content) like upper('%${keyword1}%')

            )
         </if>
         <if test="searchTypeStadium == 'stadium_name'">
            upper(st.stadium_name) like upper('%${keyword1}%')
         </if>
         <if test="searchTypeStadium == 'content'">
            upper(st.content) like upper('%${keyword1}%')
         </if>

      </if>

      <if
         test="(keyword1!=null and keyword1.length()>0) and (keyword2!=null and keyword2.length()>0)">
         ${orand}
      </if>

      <if test="keyword2!=null and keyword2.length()>0">
         <if test="searchTypeStadium == 'all' ">
            (
            upper(st.stadium_name) like upper('%${keyword2}%')
            or
            upper(st.content)
            like
            upper('%${keyword2}%')

            )
         </if>
         <if test="searchTypeStadium == 'stadium_name'">
            upper(st.stadium_name) like upper('%${keyword2}%')
         </if>
         <if test="searchTypeStadium == 'content'">
            upper(st.content) like upper('%${keyword2}%')
         </if>


      </if>

      <if test="stadium_status!=null and stadium_status.size()>0">
         <foreach collection="stadium_status" item="tmp"
            open=" and (  " close="  ) " separator=" or ">

            st.stadium_status = '${tmp}'

         </foreach>
      </if>


      <if test="sido !=null and sido>0 ">
         and
         (
         st.sido_name = ${sido}
         )

         <if test="sigungu !=null and sigungu>0 ">
            and
            (
            st.sigungu_name = ${sigungu}
            )


         </if>


      </if>


      <if
         test="(keyword1!=null and keyword1.length()>0) or (keyword2!=null and keyword2.length()>0)">
         )
      </if>


   </sql>




















   <!-- 모든 회원 목록을 가져오는 쿼리 정의 -->
   <select id="getMemberList"
      resultType="kosmo.team.project.dto.MemberDTO"
      parameterType="kosmo.team.project.dto.AdminSearchDTO">
      select * from (
      select rownum RNUM, zxcvb.* from (
      select
      m.m_no AS
      "m_no",
      m.mid AS "mid",
      m.name AS "name",
      m.nickname as "nickname",
      m.email as "email",
      m.birthdate as "birthday",
      m.phone as "phone",
      m.gender as "gender",
      s.sido_id AS "sido",
      si.sigungu_id AS "sigungu",
      m.detail_address AS "detail_address",
      to_char(m.reg_date, 'YYYY-MM-DD')
      AS "reg_date"
      , to_number(to_char(sysdate, 'YYYY')) -
      to_number(to_char(birthdate, 'YYYY')) AS age

      ,pr.games_played as
      "games_played"
      ,pr.draws as "draws"
      , pr.wins as "wins"
      ,pr.losses as
      "losses"
      ,pr.goals_for as "goals_for"
      ,pr.goals_assist as "goals_assist"



      FROM
      member m
      LEFT JOIN sido s ON m.sido_id = s.sido_id
      LEFT JOIN sigungu
      si
      ON m.sigungu_id = si.sigungu_id
      LEFT JOIN player_record pr ON m.m_no
      =
      pr.player

      where m.m_no != 1



      <include refid="boardWhere" />
      <if test="sort==null or sort.length()==0">
         order by m.m_no asc
      </if>
      <if test="sort!=null and sort.length()>0">
         order by ${sort}
      </if>
        <![CDATA[ ) zxcvb) where RNUM >= #{begin_rowNo} and RNUM <= #{end_rowNo} ]]>
   </select>










   <select id="getMemberListCnt" resultType="int">
      select
      count(*)
      from
      member m LEFT JOIN sido s ON m.sido_id = s.sido_id
      LEFT JOIN sigungu si ON m.sigungu_id = si.sigungu_id LEFT JOIN
      player_record pr ON m.m_no = pr.player
      where m.m_no != 1
      <include refid="boardWhere" />
   </select>



   <!-- 게시판 모든 행의 개수 구하는 select 문 내포하는 select 태그 선언하기 -->
   <select id="getMemberListAllCnt" resultType="int">
      select count(*)
      from
      member m
      LEFT JOIN sido s ON m.sido_id = s.sido_id
      LEFT JOIN sigungu si ON m.sigungu_id = si.sigungu_id
      LEFT JOIN
      player_record pr ON m.m_no = pr.player
      where m.m_no != 1
      <include refid="boardWhere" />
   </select>





   <select id="getMember" parameterType="int"
      resultType="kosmo.team.project.dto.MemberDTO">
      select
      m.m_no AS "m_no",
      m.mid AS "mid",
      m.name AS "name",
      m.nickname as "nickname",
      m.email as "email",
      to_char(m.birthdate,
      'YYYY-MM-DD') as "birthday",
      m.phone as "phone",
      m.gender as "gender",
      s.name AS "sido",
      si.name AS "sigungu",
      m.detail_address AS
      "detail_address",
      to_char(m.reg_date, 'YYYY-MM-DD') AS "reg_date"

      FROM
      member m left join sido s ON m.sido_id = s.sido_id
      LEFT JOIN sigungu si
      ON m.sigungu_id = si.sigungu_id
      where
      m.m_no=#{m_no}
   </select>






   <update id="updateMember"
      parameterType="kosmo.team.project.dto.MemberDTO">

      update member set

      name = #{name}
      ,mid = #{mid}
      ,nickname=#{nickname}
      ,email = #{email}
      ,birthdate = #{birthday}

      ,phone = #{phone}

      ,gender
      =#{gender}
      <if test="sido_id !=null and sido_id !=''">
         ,sido_id = #{sido_id}
      </if>
      <if test="sigungu_id !=null and sigungu_id !=''">
         ,sigungu_id = #{sigungu_id}
      </if>

      ,detail_address = #{detail_address}

      where m_no = #{m_no}

      <!-- ========================================== #{subject} 뜻 ========================================== 
         =============== {subject} 의미 =============== SQL 문에 참여할 BoardDTO 객체 안의 멤버변수 
         subject 안의 데이터를 표현하기 즉 제목을 표현하기 =============== # 의미 =============== 표현할 
         데이터가 문자라면 표현할 때 앞뒤에 ' 를 붙인다. 숫자라면 표현할 때 앞뒤에 ' 를 붙이지 않는다. -->
   </update>

   <select id="getMemberCnt" parameterType="int" resultType="int">
      select
      count(*) from member where m_no=#{m_no}
   </select>



   <delete id="deleteMember"
      parameterType="kosmo.team.project.dto.MemberDTO">

      delete from
      member
      where
      m_no=#{m_no}
      <!-- ========================================== #{b_no} 뜻 ========================================== 
         =============== {b_no} 의미 =============== SQL 문에 참여할 BoardDTO 객체 안의 멤버변수 
         b_no 안의 데이터를 표현하기 즉 게시판 번호를 표현하기 =============== # 의미 =============== 표현할 
         데이터가 문자라면 표현할 때 앞뒤에 ' 를 붙인다. 숫자라면 표현할 때 앞뒤에 ' 를 붙이지 않는다. -->
   </delete>









   <select id="getPlayerRecord" parameterType="int"
      resultType="kosmo.team.project.dto.PlayerRecordDTO">

      select
      player AS "player",
      games_played AS "games_played",
      wins as "wins",
      draws as "draws",
      losses as "losses",
      goals_for as
      "goals_for",
      goals_assist as "goals_assist"

      FROM
      player_record
      where
      player=#{player}

   </select>


   <select id="getPlayerRecordCnt" parameterType="int"
      resultType="int">
      select
      count(*) from player_record where player=#{player}
   </select>



   <update id="updatePlayerRecord"
      parameterType="kosmo.team.project.dto.PlayerRecordDTO">

      update player_record set

      games_played = #{games_played}
      ,wins=#{wins}
      ,
      draws = #{draws}
      ,losses = #{losses}
      ,goals_for =
      #{goals_for}
      ,goals_assist =
      #{goals_assist}

      where player = #{player}

   </update>



   <delete id="deletePlayerRecord"
      parameterType="kosmo.team.project.dto.PlayerRecordDTO">

      delete from
      player_record
      where
      player=#{player}

   </delete>


   <!-- 공지사항 -->

   <select id="getNoticeBoardList"
      resultType="kosmo.team.project.dto.CommunityDTO"
      parameterType="kosmo.team.project.dto.AdminSearchDTO">
      select * from ( select rownum RNUM, zxcvb.* from (

      select
      b_no AS
      "b_no",
      subject AS "subject",
      writer AS "writer",
      content AS "content",
      to_char(reg_date, 'YYYY-MM-DD') AS "reg_date",
      readcount AS "readcount"
      FROM
      noticeboard

      where 1=1
      <include refid="noticeWhere" />

      <if test="sort==null or sort.length()==0">
         order by

         b_no desc
      </if>

      <if test="sort!=null and sort.length()>0">
         order by

         ${sort}
      </if>
             
          <![CDATA[
         ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>



   <select id="getNoticeBoardListCnt" resultType="int">
      select
      count(*)
      from
      noticeboard
      where 1=1
      <include refid="noticeWhere" />
   </select>


   <!-- 게시판 모든 행의 개수 구하는 select 문 내포하는 select 태그 선언하기 -->
   <select id="getNoticeBoardAllCnt" resultType="int">
      select count(*)
      from
      noticeboard
      where 1=1
      <include refid="noticeWhere" />
   </select>



   <select id="getNoticeBoard" parameterType="int"
      resultType="kosmo.team.project.dto.CommunityDTO">

      select
      b_no "b_no"
      ,subject "subject"
      ,writer "writer"
      ,to_char(reg_date,
      'YYYY-MM-DD') AS "reg_date"
      ,readcount "readcount"
      ,content "content"


      from noticeboard

      where
      b_no=#{b_no}

   </select>

   <insert id="insertNoticeBoard"
      parameterType="kosmo.team.project.dto.CommunityDTO">
      insert into noticeboard(
      b_no
      ,subject
      ,writer
      ,readcount
      ,content
      )
      values ( (select nvl(max(b_no),0)+1
      from noticeboard)
      ,#{subject}
      ,#{writer}
      ,0
      ,#{content}
      )
   </insert>




   <update id="updateNoticeBoardReadCount" parameterType="int">

      update
      noticeboard
      set
      readcount = readcount +1 where b_no = #{b_no}



   </update>


   <update id="updateNoticeBoard"
      parameterType="kosmo.team.project.dto.CommunityDTO">

      update noticeboard set

      subject = #{subject}
      ,writer = #{writer}
      ,content
      =
      #{content}

      where b_no = #{b_no}

      <!-- ========================================== #{subject} 뜻 ========================================== 
         =============== {subject} 의미 =============== SQL 문에 참여할 BoardDTO 객체 안의 멤버변수 
         subject 안의 데이터를 표현하기 즉 제목을 표현하기 =============== # 의미 =============== 표현할 
         데이터가 문자라면 표현할 때 앞뒤에 ' 를 붙인다. 숫자라면 표현할 때 앞뒤에 ' 를 붙이지 않는다. -->
   </update>

   <select id="getNoticeBoardCnt" parameterType="int"
      resultType="int">
      select
      count(*) from noticeboard where b_no=#{b_no}
   </select>


   <delete id="deleteNoticeBoard"
      parameterType="kosmo.team.project.dto.CommunityDTO">
      delete from
      noticeboard
      where
      b_no=#{b_no}
      <!-- ========================================== #{b_no} 뜻 ========================================== 
         =============== {b_no} 의미 =============== SQL 문에 참여할 BoardDTO 객체 안의 멤버변수 
         b_no 안의 데이터를 표현하기 즉 게시판 번호를 표현하기 =============== # 의미 =============== 표현할 
         데이터가 문자라면 표현할 때 앞뒤에 ' 를 붙인다. 숫자라면 표현할 때 앞뒤에 ' 를 붙이지 않는다. -->
   </delete>





   <!-- 경기장 -->

   <select id="getStadiumList"
      resultType="kosmo.team.project.dto.Stadim2DTO"
      parameterType="kosmo.team.project.dto.AdminSearchDTO">
      select * from (
      select rownum RNUM, zxcvb.* from (
      select
      st.stadium_no
      AS "stadium_no"
      ,st.stadium_name AS "stadium_name"
      ,s.name AS
      "sido_name"
      ,si.name as "sigungu_name"
      ,st.detailed_address as
      "detailed_address"
      ,to_char(st.reg_date, 'YYYY-MM-DD') AS "reg_date"
      ,st.content as "content"
      ,st.stadium_status as "stadium_status"

      FROM
      stadium st
      LEFT
      JOIN sido s ON st.sido_name = s.sido_id
      LEFT JOIN sigungu
      si ON
      st.sigungu_name = si.sigungu_id
      where 1=1

      <include refid="stadiumWhere" />

      <if test="sort==null or sort.length()==0">
         order by st.stadium_no asc
      </if>
      <if test="sort!=null and sort.length()>0">
         order by ${sort}
      </if>
        <![CDATA[ ) zxcvb) where RNUM >= #{begin_rowNo} and RNUM <= #{end_rowNo} ]]>
   </select>




   <select id="getStadiumListCnt" resultType="int">
      select
      count(*)
      FROM
      stadium st
      LEFT JOIN sido s ON st.sido_name =
      s.sido_id
      LEFT JOIN
      sigungu si ON st.sigungu_name = si.sigungu_id
      where
      1=1
      <include refid="stadiumWhere" />


   </select>



   <!-- 게시판 모든 행의 개수 구하는 select 문 내포하는 select 태그 선언하기 -->
   <select id="getStadiumListAllCnt" resultType="int">
      select
      count(*)
      FROM
      stadium st
      LEFT JOIN sido s ON st.sido_name =
      s.sido_id
      LEFT JOIN
      sigungu si ON st.sigungu_name = si.sigungu_id
      where
      1=1
      <include refid="stadiumWhere" />


   </select>


   <select id="getStadium" parameterType="int"
      resultType="kosmo.team.project.dto.Stadim2DTO">

      select
      st.stadium_no AS "stadium_no"
      ,st.stadium_name AS "stadium_name"
      ,s.name AS "sido_name"
      ,si.name as "sigungu_name"
      ,st.detailed_address
      as
      "detail_address"
      ,to_char(st.reg_date, 'YYYY-MM-DD') AS "reg_date"
      ,st.content as "content"
      ,st.stadium_status as "stadium_status"

      FROM
      stadium st
      LEFT JOIN sido s ON st.sido_name =
      s.sido_id
      LEFT JOIN
      sigungu
      si ON st.sigungu_name = si.sigungu_id

      where
      stadium_no=#{stadium_no}
      <!-- ========================================== #{b_no} 뜻 ========================================== 
         select SQL 문에 참여할 외부 데이터중에 int 또는 double 또는 String 을 표현하기. 참여하는 외부 데이터가 int 
         또는 double 또는 String 이라면 b_no 라는 영문 대신에 영문 아무거나 써도 된다. 외부 데이터가 문자라면 표현할 때 
         앞뒤에 ' 가 붙는다. 숫자라면 표현할 때 앞뒤에 ' 없이 그냥 표현된다. -->


   </select>

   <update id="updateStadium"
      parameterType="kosmo.team.project.dto.Stadim2DTO">

      update stadium set
      stadium_name = #{stadium_name}
      <if test="sido_id !=null and sido_id !=''">
         ,sido_name = #{sido_id}
      </if>
      <if test="sigungu_id !=null and sigungu_id !=''">
         ,sigungu_name = #{sigungu_id}
      </if>
      ,detailed_address = #{detail_address}
      ,content = #{content}
      ,stadium_status = #{stadium_status}

      where
      stadium_no=#{stadium_no}


   </update>

   <select id="getStadiumCnt" parameterType="int" resultType="int">
      select
      count(*) from stadium where stadium_no=#{stadium_no}
   </select>


   <delete id="deleteStadium"
      parameterType="kosmo.team.project.dto.Stadim2DTO">
      delete from
      stadium
      where
      stadium_no=#{stadium_no}
      <!-- ========================================== #{b_no} 뜻 ========================================== 
         =============== {b_no} 의미 =============== SQL 문에 참여할 BoardDTO 객체 안의 멤버변수 
         b_no 안의 데이터를 표현하기 즉 게시판 번호를 표현하기 =============== # 의미 =============== 표현할 
         데이터가 문자라면 표현할 때 앞뒤에 ' 를 붙인다. 숫자라면 표현할 때 앞뒤에 ' 를 붙이지 않는다. -->
   </delete>

   <insert id="insertStadium"
      parameterType="kosmo.team.project.dto.Stadim2DTO">
      insert into stadium(
      stadium_no
      ,stadium_name
      ,sido_name
      ,sigungu_name
      ,detailed_address
      ,content
      ,stadium_status
      )
      values ( (select
      nvl(max(stadium_no),0)+1
      from stadium)
      ,#{stadium_name}
      ,#{sido_id}
      ,#{sigungu_id}
      ,#{detail_address}
      ,#{content}
      ,#{stadium_status}
      )
   </insert>


   <!-- 
   <select id="getTournamentList" resultType="kosmo.team.project.dto.TournamentDTO" parameterType="kosmo.team.project.dto.TournamentSearchDTO">      
       select * from ( select rownum RNUM, zxcvb.* from( 
         select
            r.list_no 
            ,r.subject
            ,s.name    as "region_c"
            ,to_char(r.regist_start,'YYYY-MM-DD') as "regist_start"
            ,to_char(r.regist_end,'YYYY-MM-DD')    as "regist_end"
            ,to_char(r.reg_date,'YYYY-MM-DD')     as "reg_date"  
         from 
            tournament r left join sido s on r.region = s.sido_id  
         where
            1=1
            <if test="region != null and region != '전체' and ing != null">
               and
               r.region=#{region}
               and 
               (to_date(#{ing},'YYYY-MM-DD') - r.regist_end) <![CDATA[ <0 ]]>
            </if>
            
            <if test="region != null and region != '전체' and end != null">
               and
               r.region=#{region}
               and 
               (to_date(#{end},'YYYY-MM-DD') - r.regist_end)>0
            </if>
            
            
            <if test="ing != null">
               and 
               (to_date(#{ing},'YYYY-MM-DD') - r.regist_end) <![CDATA[ <0 ]]>
            </if>
            
            <if test="end != null">
               and 
               (to_date(#{end},'YYYY-MM-DD') - r.regist_end)>0
            </if>
            
             <if test="(keyword1 != null and keyword1.length() > 0)">
               and (
               </if>
                  <if test="keyword1 != null and keyword1.length() > 0">
                     (
                     <if test="searchType1 == 'title'">
                        upper(r.subject) like upper('%${keyword1}%')
                     </if>
                     <if test="searchType1== 'content'">
                        upper(r.content) like upper('%${keyword1}%')
                     </if>
                     <if test="searchType1 == 'all'">
                        upper(r.subject) like upper('%${keyword1}%')
                        or
                        upper(r.content) like upper('%${keyword1}%')
                     </if>
                     )
                  </if>
               <if test="(keyword1 != null and keyword1.length() > 0)">
                  )
               </if>
               
         <![CDATA[
         ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
    -->
   
   <select id="getTournamentList" resultType="kosmo.team.project.dto.TournamentDTO" parameterType="kosmo.team.project.dto.TournamentSearchDTO">      
       select * from ( select rownum RNUM, zxcvb.* from( 
         select
            list_no 
            ,subject
            ,region
            ,to_char(regist_start,'YYYY-MM-DD') as "regist_start"
            ,to_char(regist_end,'YYYY-MM-DD')    as "regist_end"
            ,to_char(reg_date,'YYYY-MM-DD')     as "reg_date"  
         from 
            tournament
         where
            1=1
            <if test="region != null and region != '전체' and ing != null">
               and
               region=#{region}
               and 
               (to_date(#{ing},'YYYY-MM-DD') - regist_end) <![CDATA[ <0 ]]>
            </if>
            
            <if test="region != null and region != '전체' and end != null">
               and
               region=#{region}
               and 
               (to_date(#{end},'YYYY-MM-DD') - regist_end)>0
            </if>
            
            
            <if test="ing != null">
               and 
               (to_date(#{ing},'YYYY-MM-DD') - regist_end) <![CDATA[ <0 ]]>
            </if>
            
            <if test="end != null">
               and 
               (to_date(#{end},'YYYY-MM-DD') - regist_end)>0
            </if>
            
             <if test="(keyword1 != null and keyword1.length() > 0)">
               and (
               </if>
                  <if test="keyword1 != null and keyword1.length() > 0">
                     (
                     <if test="searchType1 == 'title'">
                        upper(subject) like upper('%${keyword1}%')
                     </if>
                     <if test="searchType1== 'content'">
                        upper(content) like upper('%${keyword1}%')
                     </if>
                     <if test="searchType1 == 'all'">
                        upper(subject) like upper('%${keyword1}%')
                        or
                        upper(content) like upper('%${keyword1}%')
                     </if>
                     )
                  </if>
               <if test="(keyword1 != null and keyword1.length() > 0)">
                  )
               </if>
               
         <![CDATA[
         ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
   
    <select id="getTournamentListCnt" parameterType="kosmo.team.project.dto.TournamentSearchDTO"   resultType="int">
      select
          count(list_no)
      from 
         tournament
       where
          1=1
      
   </select>


<sql id="gallaryWhere">
      <if test="keyword1 != null and keyword1.length() > 0">
         and 
         (
      </if>
      
      <if test="keyword1 != null and keyword1.length() > 0">
         <if test="searchType1 == 'all' ">
            (
               upper(nickname) like upper('%${keyword1}%')
               or
               upper(subject) like upper('%${keyword1}%')
               or
               upper(content) like upper('%${keyword1}%')
            )
         </if>

         <if test="searchType1 == 'writer'">
            upper(nickname) like upper('%${keyword1}%')
         </if>

         <if test="searchType1 == 'subject'">
            upper(subject) like upper('%${keyword1}%')
         </if>
         
         <if test="searchType1 == 'content'">
            upper(content) like upper('%${keyword1}%')
         </if>
      </if>
      
      <if test="keyword1 != null and keyword1.length() > 0">
         )
      </if>
   </sql>

   <!-- 갤러리 리스트 전체 개수. (임시로 IMAGEBOARD 테이블 사용) -->
   <select id="getCommunityGallaryBoardListAllCnt" resultType="int">
      select count(*) from imageboard
   </select>

   <!-- 갤러리 리스트 검색한 개수. (임시로 IMAGEBOARD 테이블 사용) -->
   <select id="getCommunityGallaryBoardListCnt" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO" resultType="int">
      select count(*)
      from
      (
         select *
         from
         (
               select 
                    ima.b_no
                  , ima.subject
                  , ima.writer
              , ( select nickname from member where m_no = ima.writer ) as "NICKNAME"        
                  , ima.content            
                  , ima.readcount      
                  , ima.reg_date      
            
            from imageboard ima            
            )
            
            where   1 = 1
            <include refid="gallaryWhere" />
      )      
   </select>
   
   <!-- admin 갤러리 검색 리스트. (임시로 IMAGEBOARD 테이블 사용) -->
   <select id="getCommunityGallaryBoardList" resultType="kosmo.team.project.dto.CommunityDTO" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO">   
      select * from ( select rownum RNUM, zxcvb.* from (

         select *
         from
            (
            select 
                  ima.b_no
                 , ima.subject
                 , ima.writer
                 , ( select nickname from member where m_no = ima.writer ) as "NICKNAME"
                 , ima.content      
                 , ima.readcount   
                 , ima.reg_date
            
            from imageboard ima   
         )
            
            where   1 = 1
            
            <include refid="gallaryWhere" />
            
            order by reg_date desc, b_no desc
             
      <![CDATA[
      ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>

   <!-- admin 갤러리 입력. (임시로 IMAGEBOARD 테이블 사용) -->
   <insert id="insertCommunityGallaryProc" parameterType="kosmo.team.project.dto.CommunityDTO">
      insert into imageboard
      (
            b_no
         ,   subject
         ,   writer
         ,   content
         ,   readcount
         ,   reg_date
      )
      values
      (
            ( select nvl( max( b_no ), 0 ) + 1 from imageboard )
         ,   #{ subject }
         
         -- ** 테이블 IMAGEBOARD 테이블 변경시 nickname 부분 수정해야함.
         ,   ( select m_no from member where nickname = '${ nickname }' )
         --,   '${ nickname }'
            
         ,   #{ content }
         ,   0
         ,   sysdate
      )
   </insert>

   <!-- admin 갤러리 상세보기 조회수 + 1. (임시로 IMAGEBOARD 테이블 사용) -->
   <update id="updateCommunityGallaryReadCount" parameterType="int">
      update imageboard
      set
      readcount = readcount + 1 
      where b_no = #{ b_no }
   </update>

   <!-- admin 갤러리 상세보기 데이터 조회. (임시로 IMAGEBOARD 테이블 사용) -->
   <select id="getCommunityGallaryDetailForm" parameterType="int" resultType="kosmo.team.project.dto.CommunityDTO">
      select
          i.b_no       "b_no"
           , i.subject       "subject"
           , i.writer       "writer"
           , m.nickname      "nickname"
           , i.content      "content"
           , i.readcount   "readcount"
           , i.reg_date      "reg_date"
           
           from imageboard i, member m 
            
           where
           i.b_no = ${ b_no }
           and
           i.writer = m.m_no      
   </select>

   <!-- admin 갤러리 게시글 있는지 확인. (임시로 IMAGEBOARD 테이블 사용) -->
   <select id="getCommunityGallaryBoardCnt" parameterType="int" resultType="int">
      select count(*) from imageboard 
      where b_no = #{b_no}
   </select>

   <!-- admin 갤러리 수정. (임시로 IMAGEBOARD 테이블 사용) -->
   <update id="updateCommunityGallaryUpProc" parameterType="kosmo.team.project.dto.CommunityDTO">
      update IMAGEBOARD 
         set
           subject = #{ subject }
         , content= #{ content }
         , reg_date = SYSDATE

      where b_no = #{ b_no }
   </update>

   <!-- admin 갤러리 삭제. (임시로 IMAGEBOARD 테이블 사용) -->
   <delete id="deleteCommunityGallaryDelProc" parameterType="kosmo.team.project.dto.CommunityDTO">
      delete from imageboard where b_no = #{ b_no }
   </delete>
   
   <!-- ㅡadmin 장터ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
   
   <sql id="marketplaceWhere">
      <if test="keyword1 != null and keyword1.length() > 0">
         and 
         (
      </if>
      
      <if test="keyword1 != null and keyword1.length() > 0">
         <if test="searchType1 == 'all' ">
            (
               upper(nickname) like upper('%${keyword1}%')
               or
               upper(subject) like upper('%${keyword1}%')
               or
               upper(content) like upper('%${keyword1}%')
            )
         </if>
         <if test="searchType1 == 'writer'">
            upper(nickname) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'subject'">
            upper(subject) like upper('%${keyword1}%')
         </if>
         <if test="searchType1 == 'content'">
            upper(content) like upper('%${keyword1}%')
         </if>
      </if>
      
      <if test="keyword1 != null and keyword1.length() > 0">
         )
      </if>
   </sql>
   
   <!-- admin 판매, 무료나눔 2개 테이블 Union All 하여 총 개수 리턴 -->
   <select id="getTabAllMarketplaceBoardListAllCnt" resultType="int">
      select count(*)
      from
      (
         select * from sale 
         union all
          select * from free_sharing
      )
   </select>
   
    <!-- admin 판매, 무료나눔 2개 테이블 Union All 하여 검색 개수 리턴 -->
   <select id="getTabAllMarketplaceBoardListCnt" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO" resultType="int">
      select count(*)
      from
      (
            select *
            from
            (
               select 
                    s.sale_no      
                  , s.subject
                  , s.writer   as "writer"
                                                      -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = s.writer ) as "NICKNAME"  
                         
                  , s.content      
                  , s.readcount   
                  , s.reg_date   
            
               from sale s
            
               union all
            
               select 
                    f.free_sharing_no
                  , f.subject         
                  , f.writer   as "writer"
                                                         -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = f.writer ) as "NICKNAME"       
                  
                  , f.content         
                  , f.readcount      
                  , f.reg_date      
            
               from free_sharing f
            )
            
            where   1 = 1
            <include refid="marketplaceWhere" />
      )      
   </select>
   
   <!-- 판매, 무료나눔 2개 테이블 Union All 하여 검색 리스트 리턴 -->
   <select id="getTabAllMarketplaceBoardList" resultType="kosmo.team.project.dto.CommunityDTO" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO">   
      select * from ( select rownum RNUM, zxcvb.* from (

            select *
            from
            (
               select 
                    s.sale_no    as "b_no"   
                  , s.subject
                  , s.writer   as "writer"
                                                         -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = s.writer ) as "NICKNAME" 
                          
                  , s.content      
                  , s.readcount   
                  , s.reg_date
                  , 'sale'     as "table_name"   
            
               from sale s
            
               union all
            
               select 
                    f.free_sharing_no
                  , f.subject         
                  , f.writer   as "writer"
                                                       -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = f.writer ) as "NICKNAME"   
                         
                  , f.content         
                  , f.readcount      
                  , f.reg_date
                  , 'free_sharing'   as "table_name"      
            
               from free_sharing f
            )
            
            where   1 = 1
            
            <include refid="marketplaceWhere" />
            
            order by reg_date desc, "b_no" desc
             
      <![CDATA[
      ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
   
   <!-- 판매 테이블 총 개수 리턴 -->
   <select id="getTabSaleMarketplaceBoardListAllCnt" resultType="int">
      select count(*)
      from
      (
         select * from sale 
      )
   </select>
   
   <!-- 판매 검색 개수 리턴 -->
   <select id="getTabSaleMarketplaceBoardListCnt" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO" resultType="int">
      select count(*)
      from
      (
            select *
            from
            (
               select 
                    s.sale_no      
                  , s.subject
                  , s.writer   as "writer"
                                                            -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = s.writer ) as "NICKNAME"   
                         
                  , s.content      
                  , s.readcount   
                  , s.reg_date   
            
               from sale s
            
            )
            
            where   1 = 1
            <include refid="marketplaceWhere" />
      )      
   </select>
   
   <!-- 판매 검색 리스트 리턴 -->
   <select id="getTabSaleMarketplaceBoardList" resultType="kosmo.team.project.dto.CommunityDTO" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO">   
      select * from ( select rownum RNUM, zxcvb.* from (

            select *
            from
            (
               select 
                    s.sale_no    as "b_no"
                  , s.subject
                  , s.writer   as "writer"
                                                       -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = s.writer ) as "NICKNAME"   
                        
                  , s.content      
                  , s.readcount   
                  , s.reg_date
                  , 'sale'   as "table_name"   
            
               from sale s
   
            )
            
            where   1 = 1
            
            <include refid="marketplaceWhere" />
            
            order by reg_date desc, "b_no" desc
             
      <![CDATA[
      ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
   
   <!-- 무료나눔 테이블 총 개수 리턴 -->
   <select id="getTabFreeSharingMarketplaceBoardListAllCnt" resultType="int">
      select count(*)
      from
      (
         select * from free_sharing 
      )
   </select>
   
   <!-- 무료나눔 검색 개수 리턴 -->
   <select id="getTabFreeSharingMarketplaceBoardListCnt" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO" resultType="int">
      select count(*)
      from
      (
            select *
            from
            (
               select 
                    f.free_sharing_no
                  , f.subject         
                  , f.writer   as "writer"
                                                            -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = f.writer ) as "NICKNAME"    
                        
                  , f.content         
                  , f.readcount      
                  , f.reg_date
                  , 'free_sharing'   as "table_name"      
            
               from free_sharing f
            
            )
            
            where   1 = 1
            <include refid="marketplaceWhere" />
      )      
   </select>
   
   <!-- 무료나눔 검색 리스트 리턴 -->
   <select id="getTabFreeSharingMarketplaceBoardList" resultType="kosmo.team.project.dto.CommunityDTO" parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO">   
      select * from ( select rownum RNUM, zxcvb.* from (

            select *
            from
            (
               select 
                    f.free_sharing_no  as "b_no"
                  , f.subject         
                  , f.writer   as "writer"
                                                       -- NICKNAME 대문자를 소문자로 변경금지!
                  , ( select nickname from member where m_no = f.writer ) as "NICKNAME"       
                     
                  , f.content         
                  , f.readcount      
                  , f.reg_date
                  , 'free_sharing'   as "table_name"
                     
            
               from free_sharing f
   
            )
            
            where   1 = 1
            
            <include refid="marketplaceWhere" />
            
            order by reg_date desc, "b_no" desc
             
      <![CDATA[
      ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
   
   <insert id="insertMarketplaceSaleCommunity" parameterType="kosmo.team.project.dto.CommunityDTO">
      insert into sale
      (
      sale_no
      , subject
      , writer
      , content
      , readcount
      , reg_date
      )
      values
      (
         ( select nvl( max( sale_no ), 0 ) + 1 from sale )
         , #{ subject }
         , ( select m_no from member where nickname = '${ nickname }' )   
         , #{ content }
         , 0
         , sysdate
      )
   </insert>
   
    <insert id="insertMarketplaceFreeSharingCommunity"
      parameterType="kosmo.team.project.dto.CommunityDTO">
      insert into  free_sharing
      (
      free_sharing_no
      , subject
      , writer
      , content
      , readcount
      , reg_date
      )
      values
      (
         ( select nvl( max( free_sharing_no ), 0 ) + 1 from free_sharing )
         , #{ subject }
         , ( select m_no from member where nickname = '${ nickname }' )   
         , #{ content }
         , 0
         , sysdate
      )
   </insert>
   
   <update id="updateMarketplaceSaleBoardReadCount" parameterType="int">
      update sale 
             set readcount = readcount +1 
       where sale_no = #{b_no}
   </update>
   
   <select id="getCommunityMarketplaceSaleDetailForm" parameterType="int"
      resultType="kosmo.team.project.dto.CommunityDTO">

      select
           s.sale_no "b_no"
           ,s.subject "subject"
           ,s.writer "writer" 
           ,m.nickname as "nickname"
           ,s.content "content"
           ,s.readcount "readcount"
           ,s.reg_date "reg_date"
           , 'sale'   as "table_name"
           
           
           from sale s, member m 
            
           where
           s.sale_no=#{b_no}
           and
           s.writer = m.m_no 
      
   </select>
   
   <update id="updateMarketplaceFreeSharingBoardReadCount" parameterType="int">
      update free_sharing 
             set readcount = readcount +1 
       where free_sharing_no = #{b_no}
   </update>
   
   <select id="getCommunityMarketplaceFreeSharingDetailForm" parameterType="int"
      resultType="kosmo.team.project.dto.CommunityDTO">

      select
            f.free_sharing_no "b_no"
            ,f.subject "subject"
            ,f.writer "writer"
            ,m.nickname as "nickname"
            ,f.content "content"
            ,f.readcount "readcount"
            ,f.reg_date "reg_date"
            ,'free_sharing'   as "table_name"
            
            from free_sharing f, member m 
    
            where
            f.free_sharing_no=#{b_no}
             and
           f.writer = m.m_no 
      
   </select>
   
   <select id="getMarketplaceSaleBoardCnt" parameterType="int" resultType="int">
      select
      count(*) from sale where sale_no = #{b_no}
   </select>
   
   <update id="updateMarketplaceSaleBoard" parameterType="kosmo.team.project.dto.CommunityDTO">

      update sale set

      subject = #{subject}
      ,content= #{content}
      ,reg_date = SYSDATE

      where sale_no = #{b_no}

   </update>
   
   <select id="getMarketplaceFreeSharingBoardCnt" parameterType="int" resultType="int">
      select
      count(*) from free_sharing where free_sharing_no = #{b_no}
   </select>
   
   <update id="updateMarketplaceFreeSharingBoard" parameterType="kosmo.team.project.dto.CommunityDTO">

      update free_sharing set

      subject = #{subject}
      ,content= #{content}
      ,reg_date = sysdate

      where free_sharing_no = #{b_no}

   </update>
   
   <delete id="deleteMarketplaceSaleBoard" parameterType="kosmo.team.project.dto.CommunityDTO">
      delete from
      sale
      where
      sale_no=#{b_no}
   </delete>
   
   <delete id="deleteMarketplaceFreeSharingBoard" parameterType="kosmo.team.project.dto.CommunityDTO">
      delete from
      free_sharing
      where
      free_sharing_no=#{b_no}
   </delete>
   
   <!-- admin 게시판 모든 행의 개수 구하는 select 문 내포하는 select 태그 선언하기 -->
   <select id="getFreeBoardAllCnt" resultType="int">
      select count(*)
      from
      freeboard
   </select>
   
   <select id="getFreeBoardListCnt" resultType="int">
      select
      count(*)
      from
      freeboard
   </select>
   
   <!-- 자유게시판 -->
   <select id="getFreeBoardList"
      resultType="kosmo.team.project.dto.CommunityDTO"
      parameterType="kosmo.team.project.dto.AdminCommunitySearchDTO">
      select * from ( select rownum RNUM, zxcvb.* from (

      select
      f.b_no AS   "b_no",
      f.subject AS "subject",
      f.writer as "writer",
                                                -- NICKNAME 대문자를 소문자로 변경금지!
      ( select nickname from member where m_no = f.writer ) as "NICKNAME",  
          
      f.content AS "content",
      to_char(f.reg_date, 'YYYY-MM-DD') AS "reg_date",
      f.readcount AS "readcount"
      FROM
      freeboard f
      order by
      b_no desc
             
          <![CDATA[
         ) zxcvb) where  RNUM  >= #{begin_rowNo}  and RNUM <= #{end_rowNo}
      ]]>
   </select>
   
   <insert id="insertCommunityFreeBoard" parameterType="kosmo.team.project.dto.CommunityDTO">      
      insert into freeboard
      (
            b_no   
         ,   subject   
         ,   writer   
         ,   content   
         ,   readcount
         ,   reg_date         
      )
      values
      (
            ( select nvl( max ( b_no ), 0 ) + 1 from freeboard )
         ,    #{ subject }
         ,   ( select m_no from member where nickname = '${ writer }' )         
         ,    #{ content }
         ,    0
         ,    sysdate
      )      
   </insert>
   
   <update id="updateFreeBoardDetailReadCountPlusOne" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO">   
      update   freeboard
            
      set      readcount   =   readcount + 1
      
      where   b_no      =   #{ b_no }        
   </update>
   
   <select id="getFreeBoardDetail" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO" resultType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO" >   
      select 
            b_no         "b_no"
         ,   subject         "subject"
         ,   ( select nickname from member where m_no = ( select writer from freeboard where b_no = #{ b_no } ) ) as "writer"
         ,   content         "content"
         ,   readcount      "readcount"
         ,   reg_date      "reg_date"
         
            
      from   freeboard
              
      where   b_no   =   #{ b_no }           
   </select>
   
   <select id="getFreeBoardDetailCommentPageListCount" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO" resultType="int" >   
      select count(*)         
               
      from freeboard_comment

      where   
            1 = 1
              and
            b_no = #{ b_no }
   </select>
   
   <select id="getFreeBoardDetailCommentPageList" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO" resultType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO" >
         select * from 
         ( 
            select 
                  rownum rnum
               ,   zxcvb.* 
               
            from 
            (   
      
               select
                     comment_no                      as "comment_no"
                  ,   b_no                     as "b_no" 
                  ,   nick_name                  as "nick_name"
                  ,   content                     as "content"
                  ,   print_no                  as "print_no"
                  ,   print_level                  as "print_level"
                  ,   to_char(reg_date, 'yyyy-mm-dd hh24:mi:ss') as "reg_date"
                           
               from freeboard_comment
               
               where
                     1 = 1
                     and
                     b_no = #{ b_no }
                            
               order by 
                     group_no desc, print_no asc
              
      
            ) zxcvb 
   <![CDATA[
         
            where   rownum <= ${ end_rowNo } 
         ) 
         
         where   rnum >= ${ begin_rowNo }
         
   ]]>   
   </select>   
   
   <insert id="insertFreeBoardDetailComment" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO">   
      insert   into   freeboard_comment
      (
            comment_no
         ,   b_no
         ,   nick_name
         ,   content
         ,   group_no
         ,   print_no
         ,   print_level
         ,   reg_date
      ) 
      values 
      (
            ( select nvl(max(comment_no),0) + 1 from freeboard_comment )
         ,   #{ b_no }
         ,   #{ nick_name }
         ,   #{ content }
         ,   ( select nvl(max(comment_no),0) + 1 from freeboard_comment )   
         ,   0
         ,   0
         ,   sysdate
      )      
   </insert>
   
   <update id="updateFreeBoardDetailCommentToComment" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO">   
      update   freeboard_comment
      
      set
            print_no   =   print_no + 1
      
        where
              group_no   =   ( select group_no from freeboard_comment where comment_no = #{ comment_no } )
              and
              print_no   >   ( select print_no from freeboard_comment where comment_no = #{ comment_no } )              
   </update>
   
   <insert id="insertFreeBoardDetailCommentToComment" parameterType="kosmo.team.project.dto.CommunityFreeBoardDetailDTO">   
      insert   into   freeboard_comment
      (
            comment_no
         ,   b_no
         ,   nick_name
         ,   content
         ,   group_no
         ,   print_no
         ,   print_level
         ,   reg_date
      ) 
      values 
      (
            ( select nvl(max(comment_no),0) + 1 from freeboard_comment )
         ,   #{ b_no }
         ,   #{ nick_name }
         ,   #{ content }
         ,   ( select group_no          from freeboard_comment where comment_no = #{ comment_no })
         ,   ( select print_no    + 1   from freeboard_comment where comment_no = #{ comment_no })
         ,   ( select print_level + 1    from freeboard_comment where comment_no = #{ comment_no })
         ,   sysdate
      )      
   </insert>
   
   <select id="getFreeBoard" parameterType="int"
      resultType="kosmo.team.project.dto.CommunityDTO">

      select
      f.b_no "b_no"
      ,f.subject "subject"
      ,f.writer "writer"
      ,( select nickname from member where m_no = f.writer ) as "nickname"      
      ,f.reg_date   "reg_date"
      ,f.readcount "readcount"
      ,f.content "content"


      from freeboard f

      where
      b_no=#{b_no}
      <!-- ========================================== #{b_no} 뜻 ========================================== 
         select SQL 문에 참여할 외부 데이터중에 int 또는 double 또는 String 을 표현하기. 참여하는 외부 데이터가 int 
         또는 double 또는 String 이라면 b_no 라는 영문 대신에 영문 아무거나 써도 된다. 외부 데이터가 문자라면 표현할 때 
         앞뒤에 ' 가 붙는다. 숫자라면 표현할 때 앞뒤에 ' 없이 그냥 표현된다. -->
   </select>
   
   <update id="updateCommunityFreeBoard" parameterType="kosmo.team.project.dto.CommunityDTO">
      update    freeboard 
      
      set
            subject = #{ subject }         
         ,   content   = #{ content }
         

      where    b_no = #{ b_no }
   </update>
   
   <select id="getCommunityFreeBoardCount" parameterType="int" resultType="int">      
      select    count(*) 
      
      from    freeboard 
      
      where    b_no = #{ b_no }      
   </select>
   
   <select id="getFreeBoardCommentCount" parameterType="int" resultType="int">      
      select    count(*) 
      
      from    freeboard_comment
      
      where    b_no = #{ b_no }      
   </select>
   
   <delete id="deleteCommunityFreeBoard" parameterType="kosmo.team.project.dto.CommunityDTO">      
      delete    from    freeboard
      
      where   b_no = #{ b_no }      
   </delete>






</mapper>